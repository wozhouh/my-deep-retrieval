# -*- coding: utf-8 -*-

# Python script that visualize the top-k similar clusters generated by the model
# given the features saved as .npy

import numpy as np
import argparse
import os

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Evaluation of the similar clusters generated by the model')
    parser.add_argument('--npy', type=str, required=True, help='path to the feature embedding saved as .npy')
    parser.add_argument('--txt', type=str, required=True, help='path to the features file saved as .txt')
    parser.add_argument('--sim', type=str, required=True, help='path to the similarity matrix saved as .npy')
    parser.add_argument('--cluster_dir', type=str, required=True, help='path to the directory for saving the clusters')
    parser.add_argument('--img_dir', type=str, required=True, help='path to the directory of all the images')

    num_queries = 100  # number of queries for test
    num_display = 100  # top-k similar images to display

    # load the features pre-calculated by the model
    args = parser.parse_args()
    features = np.load(args.npy)

    # if the similarity matrix exists already, load it, and generate it otherwise
    if not os.path.exists(args.sim):
        sim = features.dot(features.T)
        np.save(args.sim, sim)
    else:
        sim = np.load(args.sim)

    # read the txt which saves the correspondence of image names and features
    txt = open(args.txt, 'r').readlines()

    # iterate over each query
    for k in range(num_queries):
        top_k = np.argsort(sim[k])[-num_display:]
        dst_dir = os.path.join(args.cluster_dir, str(k))
        os.makedirs(dst_dir)
        # choose top-k to display
        for i in range(num_display):
            img_idx = top_k[-i-1]
            img_raw_name = txt[img_idx].strip().split('\t')[1]
            img_src_path = os.path.join(args.img_dir, img_raw_name + '.jpg')
            img_dst_path = os.path.join(dst_dir, str(i).zfill(5) + '_' + img_raw_name.split('_')[0] + '_' + str(sim[k, img_idx]) + '.jpg')
            open(img_dst_path, 'wb').write(open(img_src_path, 'rb').read())
